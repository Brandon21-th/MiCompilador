/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package edu.itsco;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MAIN = 5;
  /** RegularExpression Id. */
  int END = 6;
  /** RegularExpression Id. */
  int INT = 7;
  /** RegularExpression Id. */
  int STRING = 8;
  /** RegularExpression Id. */
  int FLOAT = 9;
  /** RegularExpression Id. */
  int VAR = 10;
  /** RegularExpression Id. */
  int WRITE = 11;
  /** RegularExpression Id. */
  int PRINT = 12;
  /** RegularExpression Id. */
  int READ = 13;
  /** RegularExpression Id. */
  int IF = 14;
  /** RegularExpression Id. */
  int ELSE = 15;
  /** RegularExpression Id. */
  int THEN = 16;
  /** RegularExpression Id. */
  int SELECT = 17;
  /** RegularExpression Id. */
  int CASE = 18;
  /** RegularExpression Id. */
  int DEFECT = 19;
  /** RegularExpression Id. */
  int BREAK = 20;
  /** RegularExpression Id. */
  int FOR = 21;
  /** RegularExpression Id. */
  int UNTIL = 22;
  /** RegularExpression Id. */
  int NEXT = 23;
  /** RegularExpression Id. */
  int DOWHILE = 24;
  /** RegularExpression Id. */
  int WHILE = 25;
  /** RegularExpression Id. */
  int PLUS = 26;
  /** RegularExpression Id. */
  int SUBTRACTION = 27;
  /** RegularExpression Id. */
  int MULTIPLICATION = 28;
  /** RegularExpression Id. */
  int DIVISION = 29;
  /** RegularExpression Id. */
  int MODULE = 30;
  /** RegularExpression Id. */
  int HIGHER = 31;
  /** RegularExpression Id. */
  int LESS = 32;
  /** RegularExpression Id. */
  int SAME = 33;
  /** RegularExpression Id. */
  int AND = 34;
  /** RegularExpression Id. */
  int OR = 35;
  /** RegularExpression Id. */
  int NOT = 36;
  /** RegularExpression Id. */
  int OP = 37;
  /** RegularExpression Id. */
  int CP = 38;
  /** RegularExpression Id. */
  int OPK = 39;
  /** RegularExpression Id. */
  int CLK = 40;
  /** RegularExpression Id. */
  int TP = 41;
  /** RegularExpression Id. */
  int lyrics = 42;
  /** RegularExpression Id. */
  int digits = 43;
  /** RegularExpression Id. */
  int ID = 44;
  /** RegularExpression Id. */
  int VALUE_INT = 45;
  /** RegularExpression Id. */
  int VALUE_FLOAT = 46;
  /** RegularExpression Id. */
  int VALUE_STRING = 47;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"main\"",
    "\"end\"",
    "\"int\"",
    "\"string\"",
    "\"float\"",
    "\"var\"",
    "\"write\"",
    "\"print\"",
    "\"read\"",
    "\"if\"",
    "\"else\"",
    "\"then\"",
    "\"select\"",
    "\"case\"",
    "\"defect\"",
    "\"break\"",
    "\"for\"",
    "\"until\"",
    "\"next\"",
    "\"dowhile\"",
    "\"while\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\">\"",
    "\"<\"",
    "\"=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\":\"",
    "<lyrics>",
    "<digits>",
    "<ID>",
    "<VALUE_INT>",
    "<VALUE_FLOAT>",
    "<VALUE_STRING>",
  };

}
